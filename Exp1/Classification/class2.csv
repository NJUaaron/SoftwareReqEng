3,vim - Why should I use an IDE? ,"In another question  speaks highly of IDEs saying ""some people still just dont know ""why"" they should use one..."".  As someone who uses vim for programming and works in an environment where most/all of my colleagues use either vim or emacs for all of their work what are the advantages of IDEs?  Why should I use one? I'm sure this is a charged issue for some people and I'm not interested in starting a flame war so .  I'm not interested in hearing about why I shouldn't use an IDE; I already don't use one.  I'm interested in hearing from ""the other side of the fence"" so to speak. If you think that IDEs may be suitable for some types of work but not others I'm also interested to hear why.It really depends on what language you're using but in C# and Java I find IDEs beneficial for: All of these save time. They're things I could do manually but with more pain: I'd rather be coding. Code completion. It helps a lot with exploring code. The short answer as to why I use an IDE is laziness. I'm a lazy soul who doesn't like to do things a difficult way when there is an easy way to do it instead. IDE's make life easy and so appeal to us lazy folk. As I type code the IDE automatically checks the validity of the code I can highlight a method and hit F1 to get help right click and select ""go to to definition"" to jump straight to where it is defined. I hit one button and the application with debugger automatically attached is launched for me. And so the list goes on. All the things that a developer does on a day to day basis is gathered under one roof. There is no need to use an IDE. It is just much harder work not to. I don't think it's fair to do the classic ""text editor and console window vs IDE"" when ""text editor"" is really emacs. Most features that are typical for IDE:s are also in emacs. Or perhaps they even originated there and modern IDE:s are mainly interface improvements/simplifications. This means that for the original question the answer is not so clear-cut. It depends on > power of Vim using something like the  and Emacs fulfil many functions any IDE will give you. The only aspect they do not handle that a larger IDE may are things like UI designers. Then your question boils down to simply ""what IDE should I use"" with arguments to be made for the simpler realm of Vim and Emacs. For me an IDE is better because it allows faster navigation in code which is important if you have something in your mind to implement.Supposed you do not use an IDE it takes longer to get to the destination. Your thoughts may be interupted more often. It means more clicks/more keys have to be pressed.One has to concentrate more on the thought how to implement things.Of course you can write down things too but then one must jump between the design and implementation.Also a GUI designer makes a big difference. If you do that by hand it may take longer. GUI-based IDEs like Visual Studio and Eclipse have several advantages over text-based IDEs like Emacs or vim because of their display capabilities: Basically with a GUI-based IDE you can get more useful information on screen at once and you can view/edit graphical portions of of your application as easily as text portions. One of the coolest things to experience as a developer is editing a method that computes some data and seeing the live output of your code displayed graphically in another window just as your user will see it when you run the app.  Now that's WYSIWYG editing! Text-based IDEs like Emacs and vim can add features like code completion and refactoring over time so in the long run their main limitation is their text-based display model. I also almost exclusively use Vim (almost because I'm trying to learn emacs now) for all my development stuff. I think sheer intuitiveness (from the GUI of course) is the primary reason why people like to use IDEs. By being intuitive little to no learning overhead of the tool is required. The lesser the learning overhead the more they can get work done. An  allows one to work faster and more easily... I noticed I spent a lot of time navigating in the code in a simple text editor... In a good IDE that time goes down if the IDE supports jumping to functions to previous editing positionto variables... Also a good IDE reduces the time to experiment with different language features and projects as the start-up time can be small. A couple of reasons I can think of for using an IDE: And quite frankly I like my mouse. When I use pure text-based editors it gets lonely. Saves time to developMakes life easier by providing features like Integrated debugging intellisense. There are lot many but will recommend to use one they are more than obvious. I'm not sure there's a clear dividing line between a text editor and an IDE. You have the likes of Notepad at one end of the scale and the best modern IDEs at the other but there are a lot of thing in between. Most text editors have syntax highlighting; editors aimed at programmers often have various other features such as easy code navigation and auto complete. Emacs even lets you integrate a debugger. The IDEs of even ten years ago had far less features to help programmers than you'd expect of a serious text editor these days. My main  reason to use one is when the code goes beyond 100 files. Although ctags can do the work  have a pretty good way to navigate the files easily an super fast. It saves time when you have a lot of work to do. To me it's just the the GUI version of everything we did in the good old days of the terminal. I will always agree that IDE are not very superior because they hide a lot of stuff especially concerning the linking stuff but they have a notable advantage in some cases for example with certain development platforms like Qt. Some IDE like visual of others even seem to parse your code as you type it and detect errors before you even compile: it seems logics that only an IDE can work closely with a compiler to immediately detect problem in the typed source. My wild answer that the IDE/Command-line flame war exists is just because the C/C++ executable building is not very well handled from a standardized point of view unlike with the D language; every platform handles compiling/linking/etc its own way so to make it less messy they make an IDE. From your viewpoint it might be more simple to use the command-line if there would have been only one compiler with standard options it would have been easy but the truth is C/C++ is flexible so in the end all platform do it their own way hence the IDE to not waste explaining how to do it. If you can learn how an executable talks to the kernel or if you know anything about compiler design maybe there is a way to work with a proper command-line but I doubt you have. Microsoft or Apple all evil they would be have to propose a straight-forward way to build application without entering in the details and since building an application depends directly on the architecture of the OS it will hardly be ""standard"" as the command-line is. To put it simple big and complex applications where you don't want to dig too deep into what it does -&gt; IDE little pieces of software or simple system software-design -&gt; command-line. Except of course those nifty libraries that embed a Makefile but that's another story. Also I think IDE are used when the application delivered has something to do with ironically a GUI or something that has an interface or is directly bound to an OS so again it's also for people who will use a UI/GUI without knowing how it works while people who will program systems won't need it all. IDE is just modern shit but I think in 100 years the command-line will still exist. I like an IDE because it puts a lot of functionality at my fingertips.  Editing/Compilation/visibility of files in the project are all things I value in an IDE.  I use Visual Studio now but in a former life I used SlickEdit and found that it made my development process more streamlined than when I wasn't using it. There's only one thing to consider when deciding whether to use an IDE or not and that's whether it makes you more productive or not. Short question so short answer :) It depends highly on what you're doing and what language you're doing it in.  Personally I tend to not use an IDE (or ""my IDE consists of 3 xterms running vim one running a database client and one with a bash prompt or tailing logs"" depending on how broadly you define ""IDE"") for most of my work but if I were to find myself developing a platform-native GUI then I'd reach for a language-appropriate IDE in an instant - IMO IDEs and graphical form editing are clearly made for each other."
7,C++ IDE for Linux? ,"I want to expand my programming horizons to Linux. A good dependable basic toolset is important and what is more basic than an IDE? I could find these SO topics: I'm not looking for a > The minimums are fairly standard: syntax highlighting code completion (like  or its Eclipse counterpart) and integrated debugging (e.g. basicbreakpoints). I have searched for it myself but there are so many that it is almost impossible to separate the good from the bads by hand especially for someone like me who has little  C++ coding experience in Linux. I know that  and I really like that IDE for Java but is it any good for C++ and is there something better? The second post actually has some good suggestions but what I am missing is what exactly makes the sugested IDE so good for the user what are its (dis)advantages? Maybe my question should therefore be: >When originally writing this answer I had recently made the switch from Visual Studio (with years of experience) to Linux and the first thing I did was try to find a reasonable IDE. At the time this was impossible: no good IDE existed. And then I realised that the IDE in Linux is the command line with its tools: Depending on your needs you will then have to install and configure several plugins to make the editor work nicely (that’s the one annoying part). For example most programmers on Vim will benefit from the  The decision to use CodeLite was based on a research regarding the following C++ IDE for Linux: After all I have decided to use >You must definitely check out  is an excellent IDE. It supports large code-bases well without slowing down or spending all its time indexing. (This is a problem I had with eclipse's cdt).  Slickedit's speed is probably the nicest thing about it actually.The code completion works well and there are a large amount of options for things like automatic formatting beautification and refactoring.It does have integrated debugging.It has plug-in support and fairly active community creating them.In theory you should be able to integrate well with people doing the traditional makefile stuff as it allows you to create a project directly from one but that didn't work as smoothly as I would have liked when I tried it.In addition to Linux there are Mac and Windows versions of it should you need them.It's been a month since I started using Vim as my main 'GUI'tool for programming C++ in Linux. At first the learningcurve was indeed a bit steep but after a while and with theright options turned on and  I reallygot the hang of it! I love the way how you can shape Vim to suite your needs;just add/change  and Vim is turned into ahighly productive 'IDE'. The toolchain to build and compile a C++ program on Linux isalso really intuitive. make and g++ are > tools you'lluse. The  is however not really that good butmaybe that's because I haven't had the time to master itproperly. So to anyone who is or was looking for a good C++ IDE inLinux just like I was your best bet lays with the standardavailable tools in Linux itself (Vim g++ ddd) and youshould really at least try to use them before looking forsonething else... Last but not least I really want to thank  forhis answer here It really helped me find my way in theLinux development environment thank you! I'm also > closing this question so people can stillreact or maybe even add new suggestions or additions to thealready really nice answers... I recommend you read :   If you like Eclipse for Java I suggest Eclipse CDT. Despite C/C++ support isn't so powerful as is for Java it still offers most of the features. It has a nice feature named Managed Project that makes working with C/C++ projects easier if you don't have experience with Makefiles. But you can still use Makefiles.I do C and Java coding and I'm really happy with CDT. I'm developing the firmware for a embedded device in C and a application in Java that talks to this device and is really nice to  use the same environment for both. I guess it probably makes me more productive. I love how people completely miss the request in the original question for an IDE.  Linux is NOT an IDE.  That's just not what those words mean.  I learned c and c++ using vi and gcc and make and I'm not saying they aren't adequate tools but they are NOT an IDE.  Even if you use more elaborate tools like vim or emacs or whatever fancy editor you want typing commands on a command line is not an IDE. Also you all know make exists as part of visual studio right?  The idea that an IDE is ""limiting"" is just silly if you can use the IDE to speed some things yet are still able to fall back on command line stuff when needed. All that said I'd suggest as several above have trying Code blocks.  Its got decent code highlighting a pretty effortless way to create a project code it run it etc that is the core of a real IDE and seems fairly stable.  Debugging sucks...I have never seen a decent interactive debugger in any linux/unix variant.  gdb ain't it.  If you're used to visual studio style debugging you're pretty much out of luck. Anyway I'll go pack my things I know the one-view-only linux crowd will shout this down and run me out of town in no time. make + vim + gdb = one great IDE I quite like  for Eclipse could fill your needs? The Linux Tools project aims to bring a full-featured C and C++ IDE to Linux developers. We build on the source editing and debugging features of the CDT and integrate popular native development tools such as the GNU Autotools Valgrind OProfile RPM SystemTap GCov GProf LTTng etc. Current projects include LTTng trace viewers and analyzers an RPM .spec editor Autotools build integration a Valgrind heap usage analysis tool and OProfile call profiling tools. On Linux there are plenty of IDEs:  In > experience the most valuable are .Both provide all ""standard"" features (i.e. autocompletion syntax highlightning debugger git integration).It is worth noting that Eclipse also provides refactoring functionalities while Qt Creator provides integration with Valgrind and support for deployment on remote targets. Also the commercial . I'm sure you have code completion and debugging support including plugin support in this IDE. Sun Studio is available for Linux as well as Solaris. forums : . Sun Studio Linux forums :  I'll be eager to hear your feedback on this tool. BR~A I've previously used Ultimate++ IDE and it's rather good.  And then I noticed that this simply isn't how you work there* and I threw everything out spent a few days reading manuals set up my shell (bash) set up a GVIM environment learned the GCC/binutils toolchain make and gdb and lived happily ever after. I'd mostly agree but the problem is also one of perception: we forget how difficult it was to become productive in any chose IDE (or other environment).  I find IDE's (Visual Studio NetBeans Eclipse) amazingly cumbersome in so many ways. As an old-time UNIX guy I always use Emacs. But that has a pretty steep   and long learning curve so I'm not sure I can recommend it to newcomers. I'd second that; use Emacs as my primary editor on both Linux and on MSW (XP2W2K).I would disagree that it has a > delays many seconds before refreshing files from disk.   The main reason for editing in the VS window is the ""Intellisense"" code completion feature.  seems to be the best solution to write cross-os program If you were using vim for a long time then you should actually make that as your IDE. There are a lot of addons available. I found several of those as pretty useful and compiled it here have a look at it. And a lot more in the vi / vim tips &amp; tricks series over there."
12,python - Django development IDE ,I have done a little Django development but it has all been in a text editor. I was curious what more advanced development tools others are using in their Django development. I am used to using Visual Studio for development and really like the  code completion and file organization it provides and would like to find something (or a combination of tools) that would provide some of this in the Django/Python environment.I use Eclipse and a plain vanilla  Ulipad is a good one. myself. The new version of PyDev has some pretty awesome code completion support. Since I > use Eclipse for PyDev I use a slim install of just the Platform Runtime Binary + PyDev + Subclipse. 
14,eclipse - What is the best IDE to develop Android apps in? ,I am about to start developing an android app and need to get an IDE. Eclipse and the android eclipse plugin appears to be the natural choice. However I am familiar with intelliJ and re-sharper so I would prefer use intelliJ.  Has anyone used ? Is this any good? Should I just bite the bullet and learn Eclipse? IntelliJ now has support for Android. See  is the best option for android. i have used both eclipse and intellij and found intellij is much easier to use with android as compared to eclipse because of these reasons :- Intellij provides a built-in support for android and you don't have to configure it as you need to do with eclipse.Intellij gives you auto-lookup feature which is really important for developer like us to increase our productivity. And if we talk about eclipse you have to type each and every method classname etc on your own. (May be eclipse has this feature too but i never found it and trust me i tried to find it like anything)Its much more user friendly and easy to use than eclipse.I hope it will help you and other members of stack overflow to decide which IDE is best for Android development. My personal choice is Intellij. - visual editor. IDEA has one as well but it's rather primitive. I suspect that this feature will soon be deleted as IDEA will improve its editor.- many projects into one right pane (this is also my personal con as I like IDEA's one-project-per-pane thing)- faster compiles Android projects. IDEA has made its compilation process faster so I also soon expect to delete this Eclipse pro - faster intellisense (if you like Resharper then you know what I am talking about)- smarter autocomplete - my friend and I decided to write the same class. I finished before him simply because IDEA faster reacts to my wishes- incredibly smart - do not know what to do? just press Ctrl+Shift+Space and IDEA will tell you what should come there. It also recognizes naming scheme to if you're filling  method.- will add more as I remember of them   - Still the only con is that if you open Eclipse Android project and edit any XML layout file Eclipse will no longer be able to display edited file into its visual layout editor. This has not been fixed as of this day and it's IDEA's bug as it somehow messes the XML. Bottom line: if you're a person who does not see advantages of ReSharper in .NET (and we all coded in .NET) then you'll probably stick to Eclipse. It's official Android IDE and you believe it's the best.If you liked ReSharper and want to code faster then you'll appreciate IDEA and will stick to it forever.  An IDE which supports Android development is  - great for anyone familiar with Basic  Eclipse and Netbeans are both horrible slow and I'ts a miracle that even the serious developers has been sticking with it for years not even try to stick with a better product. Java as platform is a shame when it comes to non-handheld platforms (winmaclinux) and if anyone are going to develop on the platform I say do what else but do not use Java at all. For mobility it's probably has a kind of good luck here as the systems are more down-scaled. As far I know there aren't any existing IDE for Java which aren't iself written in a Java environment. This is horrible because Java is messing up the desktop  environment.  I'm willing to spend hours on google to find an Java IDE/Editor which are capable for android projects but will use a native environment for itself. I Feel Eclipse IDE is more suitable for android applications rather than other IDEs.Because its providing us more than five perspectives which will make our project flexible and ease.You may try Eclipse ides starts with 3.6 and above will provide you better performance.  which are all latest and supports all kind of access. I am a huge supporter of using the environment that is most familiar to you. However this isn't always the best option. In some cases a different environment can result in (far?) greater efficency in the long run. In this particular case I suspect that sticking with what you already know is a good option but someone starting new would benifit from the easy setup and sdk/ndk integration offered by eclipse. I also don't know how available geolocation manipulation (or phone state manipulation - ie incoming call etc) is in other IDE's but integration within eclipse feels seamless.  that i worked with that. you can try it.
19,Tips for using Vim as a Java IDE? ,"I'm addicted to Vim it's now my de facto way of editing text files. Being that it's mainly a text editor and not an IDE has anyone got tricks for me to make it easier when developing Java apps? Some questions I have: Anything else (other than ""Don't do it!"") that I should know about?Some tips: Have fun :-) I've been a Vim user for years.  I'm starting to find myself starting up Eclipse occasionally (using the vi plugin which I have to say has a variety of issues).  The main reason is that Java builds take quite a while...and they are just getting slower and slower with the addition of highly componentized build-frameworks like maven.  So validating your changes tends to take quite a while which for me seems to often lead to stacking up a bunch of compile issues I have to resolve later and filtering through the commit messages takes a while. When I get too big of a queue of compile issues I fire up Eclipse.  It lets me make cake-work of the changes.  It's slow brutal to use and not nearly as nice of an editor as Vim is (I've been using Vim for nearly a decade so it's second nature to me).  I find for precision editing—needing to fix a specific bug needing to refactor some specific bit of logic or something else...I simply can't be as efficient at editing in Eclipse as I can in Vim. Also a tip: This makes ). I have just uploaded  for the development of Java Maven projects. And don't forget to set the highlighting if you haven't already:  EDIT:  Oh an BTW i've tried eclim off and on but the reason I like vim is its lightness.  Executing eclipse even on headless mode is just too much mental lifting for me. EDIT2:  I've been using playframework lately and this will probably work with maven builds too: For compiling you can configure VIM's make to run maven or in mycase run a build script tee that to a file. ""play_compile"" is just a compile script.  It uses SBT so Maven should work just fine here.  Even direct javac will work.  This way you can use VIM""s quickfix buffer (:cnext :clist: cprev etc). For jumping around the classes I use .  Its beautiful. Use it.  Faster than eclipse in jumping around files. For jumping around methods I use tagsearch with exuberant c-tags. Jump into method declarations by using ctrl-].  Go back    usingCtrl-o.  Doesnt work as good as eclipse but it works good enough. I use  is a nice tool for coding with useful snippets (like in TextMate). You can use (or modify) a pre-made package or make your own."
24,What Ruby IDE do you prefer? ,I've been using Eclipse with RDT (not RadRails) a lot lately and I'm quite happy with it but I'm wondering if you guys know any decent alternatives. I know NetBeans also supports Ruby these days but I'm not sure what it has to offer over Eclipse. Please list any features you think are brilliant or useful when suggesting an IDE makes it easier to compare. Also I said Ruby not Rails. While Rails support is a plus I prefer things to be none Rails-centric. It should also be available on Linux and optionally Solaris.Have you tried . Once I found Geany (Ubuntu) I switched from TextMate (OSX) and never looked back. Geany is a lean clean speedy IDE that can be used either as a text editor or a light-weight IDE. It supports not only text editing features (syntax highlighting code folding auto-completion auto-closing symbol lists code navigation directory tree multi-tabbed open files etc.) but also normal IDE features such as simple project management compile-build-run within the main window. Unlike TextMate it has a Terminal screen within its own window; you do not have to go back and force between your editor window and terminal window. Unlike TextMate it supports international languages. Unlike TextMate it supports multi-platforms Unlike TextMate it is open-source and free. Geany is now my favorite C/Ruby/XML development tool.   RubyMine is so awesome. Everything just works. I could go on and on. Code completion is fast smooth and accurate. Formatting is instantaneous. Project navigation is easy and without struggle. You can pop open any file with a few keystrokes. You don't even need to keep the project tree open but it's there if you want. You can configure just about any aspect of it to behave exactly how you want. NetBeans Eclipse and RubyMine all have more or less the same set of features. However RubyMine is just so much more cleanly designed and easy to use. There's nothing awkward or clunky about it. There are all these nice little design touches that show how JetBrains really put thought into it instead of just amassing a big pile of features. Incidentally RubyMine can do a lot of the things that Vim can do like select and edit a column of text or split the view into several editing panels with different files in them. 
33,Which Android IDE is better - Android Studio or Eclipse? ,I'm starting to develop for Android. Which IDE should I use - Android Studio or Eclipse sdk?I would like to know which one is better.Working with Eclipse can be difficult at times probably when debugging and designing layouts Eclipse sometimes get stuck and we have to restart Eclipse from time to time. Also you get problems with emulators.  Android studio was released very recently and this IDE is not yet heavily used by developers. Therefore it may contain certain bugs.  This describes the difference between android android studio and eclipse project structure:  The use of IDE is your personal preference.But personally if I had to choose Eclipse is a widely known trusted and certainly offers more features then Android Studio.Android Studio is a little new right now. May be it's upcoming versions keep up to Eclipse level soon. Both are equally good. With Android Studio you have ADT tools integrated and with eclipse you need to integrate them manually. With Android Studio it feels like a tool designed from the outset with Android development in mind.Go ahead they have same features. From the Android Studio download page: Caution: Android Studio is currently available as an early access preview. Several features are either incomplete or not yet implemented and you may encounter bugs. If you are not comfortable using an unfinished product you may want to instead download (or continue to use) the ADT Bundle (Eclipse with the ADT Plugin). My first choice is  which I just finished. It shows you exactly how to use all the features of Eclipse that are useful for developing Android apps. There's also a brief section on getting set up to develop from the command line and from other IDEs.
51,testing - Online IDE for Python ,Is there any web-based IDE that I can use to run quick tests? There're a dozen for PHP and some for even Java but I haven't found yet that runs Python. If there's an  that'd be better. ThanksYou might want to give a try at: These aren't full IDEs but there are a lot of options for online python interpreters: I'm trying out  is good too. I'm pretty sure that IDE's are the last kind of programs that will ever go web based because a good IDE needs to be so extremely interactive if it wants to be good. I really don't see a reason for this and others seem to agree because there isn't any.And no an interactive web shell or compiler has nothing to do with an IDE.  
60,Using SBT from Scala IDE ,The path from SBT to Scala-IDE is well described in many places: What is the reverse for this? If I start a new project in Scala-IDE can I just add a build.sbt file and somehow tell Eclipse to use this when running the application? Apologies if this seems obvious to some but I've recently moved from ItelliJ Idea to Scala-IDE and I'm not certain about setting up Scala-IDE to use SBT and my sbt config files.No you cannot do this. The way to do it is as you described. Then whenever you make changes to build.sbt (e.g. new jar dependency) rerun the  command from sbt and refresh the project in Eclipse so that the newly generated files are reloaded. As a seasoned Eclipse user I wondered the same thing. Amazed that no one seemed to be going that direction I decided to roll my own project.  Install plugin create or modify build.sbt and dependencies are fetched project files updated. It works for me I use it every day. But it's not perfect or finished and I'm not putting in a lot of effort in it at the moment. But do feel free to contribute!
67,Is there an online PHP IDE? ,"Is there an IDE for PHP where you can edit the code for your pages online? Real syntax highlighting is minimal. More would be great. I'd like to be able to do development on my site at times other than when I'm at home. even thera are some limits (no Internet nonnections no file manipulations) I have been trying for ages to find a really good online php editor with which a/to learn php and b/convert some old Delphi (!) source files into the 21st century.  After a couple of very disappointing experiences and irritating false starts most notably with phpanywhere (god did I have high hopes on first discovering that one:( ) I eventually stumbled upon ShiftEdit in Chrome webstore. So far I've been able to everything I need and as well as providing a simple but powerful enough set of tools; reliability and a general good approach to user interaction has meant that after a couple of weeks I eventually subscribed although free was good enough for my initial purposes and evaluation.  Take from that what you will but I wholeheartedly recommend it and also love their very quick iterative release process.  I don't know what your websites audience is but generally I think it's a bad idea to edit a live website. Much too easy to accidentally break something or worse  your passwords or other secrets by accident. I run my server from home so this will not be available to everyone but this is basically what I dp: If you have access to Google Chrome editor I think you should try ShiftEdit or SourceKit Apps from the web store. This one is specialized on PHP: click File Manager then select a file and click Code Editor. : I tried using it and it can highlight PHP and HTML (at the same time) and it also has a ""code completion"" feature... I'm not sure if that's what it's called but when you write an opening bracket or quote it writes the closing one after the cursor. The only problems are that the highlighting isn't perfect (it treats escaped quotes as actual quotes) and more importantly it's not free. Etherpad is cool to code collectively but it has no syntax highlighting and is not realy an IDE just a collaborative pad for programmers with versioning and chat features.Still pretty cool but not what youre looking for. We are making exactly this happen at very simple and useful php editor - to edit your scripts on FTP server  The new platform by the ""phpanywhere"" Team. I found it to be working very well. Interesting about it making it special is the Android and Iphone app which actually enables you to really code on the go. Thats an interesting idea.  One could use something like this:  to the syntax highlighting then it's just a matter of code completion for things like functions. That much is relatively simple it gets harder when you get into things like per file (or even included file) variables (for the code completion). And now that you have me thinking... It's to bad that I don't know javascript better.If anyone wants to get together and maybe build this idea into a viable project I'm definitely game. There is also  it allows C# VB Java PHP Ruby C++.  Full disclosure I'm one of the founders."
