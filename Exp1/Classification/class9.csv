38,What is the best IDE for C Development / Why use Emacs over an IDE? ,"so as per one of my previous questions I'm brushing up on my C skills.  Thanks for posting links which answer some of my questions but I guess what I'm really wondering about is: Whether learning to edit using emacs / vim and compiling / debugging using the gcc-toolchain is worth it instead of just using an IDE and why? What are peoples reasons for not migrating to an IDE? Has anyone moved from terminal-centric development to IDE development and why did they move?I started off by using IDEs Microsoft or not. Then while working on QNX some long time ago I was forced to do with a text editor + compiler/linker. Now I prefer this simple combination––a syntax highlighting editor + C compiler and linker cli + make––to any IDEs even if environment allows for them. The reasons are for me: it's everywhere. If you program in C you do have the compiler and usually you can get yourself an editor. The first thing I do––I get myself nedit on Linux or Notepad++ on Windows. I would go with vi but GUI editors provide for a better fonts and that is important when you look at code all day you can program remotely via ssh when you need to. And it does help a lot sometimes to be able to ssh into the target and do some quick things there it keeps me close to CLI preferably UNIX/Linux CLI. So all the commands are on my fingertips and when I need them I don't have to go read a reference book. And UNIX CLI can do things IDEs often can't––because their developers didn't think you'd need them most importantly it is very much like seeing the Matrix in raw code. I operate files so I'm forced to keep them manageable. I'm finding things in my code manually which makes me keep it simple and organized. I do Config Management explicitly so I know when I'm synced and how. I know my Makefiles because I write them and they only do what I tell them to (if you wonder if that works in ""really big projects""––it does work and the bigger the project the more performance it gains me) when people ask me to look at their code I don't have to learn the IDE they use I've moved from a terminal text-editor+make environment to Eclipse for most of my projects. Spanning from C and C++ to Java and Python to name few languages I am currently working with. The reason was simply productivity. I could not afford spending time and effort on keeping all projects ""in my head"" as other things got more important.  There are benefits of using the ""hardcore"" approach (terminal) - such as that you have a much thinner layer between yourself and the code which allows you to be a bit more productive when you're all ""inside"" the project and everything is on the top of your head. But I don't think it is possible to defend that way of working just for it's own sake when your mind is needed elsewhere. Usually when you work with command line tools you will frequently have to solve a lot of boilerplate problems that will keep you from being productive. You will need to know the tools in detail to fully leverage their potentials. Also maintaining a project will take a lot more effort. Refactoring will lead to updates in make-files etc. To summarize: If you only work on one or two projects preferably full-time without too much distractions ""terminal based coding"" can be more productive than a full blown IDE. However if you need to spend your thinking energy on something more important an IDE is definitely the way to go in order to keep productivity. Make your choice accordingly. Emacs >. I have used Eclipse with the CDT plug in quite successfully. Emacs would be better if it had a text editor in it... :-) Use . Crossplatform as it is 100% pure Java. Not the fastest IDE on earth but for Java actually very fast very flexible not that nice looking though. Both have very sophisticated code folding syntax highlighting (for all languages you can think of!) and are very flexible regarding configuring it for you personal needs. jEdit is BTW very easy to extend to add whatever feature you may need there (it has an ultra simple scripting language that looks like Java but is actually ""scripted""). If you're on Windows then it's a total no-brainer: Get Visual C++ Express."
39,java - IDE for Swing ,Is there any IDE that simplifies creating Swing applications (ideally something along the lines of Visual Studio)Like others have mentioned NetBeans' visual editor is pretty good but it's based pretty heavily on the  plugin: which is also based on Eclipse simply adding a few plugins to it as many other commercial products do. It is still not able to parse any Swing code (I doubt any Swing WISIWYG editor does) but if you start with it it gives you relatively seamless experience.You need to pay for it though. At the end of the day I have worked with different similar UI tools Flash Builder Delphi etc. but unless you do some relatively trivial UI design not including much business logic and communication with other layers you'll have to accept that what you are capable of creating in code once you learn to do it properly is much more powerful than what any editor is capable of providing you with. I have switched between several IDEs and the one that I believe has the best GUI builder in terms of use and performance would have to be NetBeans. I have tried a few and the closest I have found that comes close to Visual Studio is NetBeans. Version 6.5 is excellent and really improved over version 5. I'm a big fan of JetBrains and when it comes to Java  Use NetBeans I have also successfully developed one application using NetBeans. It is realy awesome it helps you while writing the code.Since Swing generates some code on its own so it is really helpful to use Netbeans.Go through it and you can always ask question and problems.It will be good if you go for latest version release. I have always coded my UIs by hand. The frustration of dealing with screen builders and filling out all those property sheets is too much for me. After a couple of screens and a little research I am just as productive. As I'm using Eclipse I use the Visual Editor plugin. It generates clean source code with good patterns and easy to patch/modify/extend.Unfortunately it is not very stable. But it's worth trying. I like Eclipse's VisualEditor (VE) and sometime ago I've tried to switch toanother editor but I found it impossible. Visual editor has thisfeature that it generates manageable readable editable and easy-to-understand code. Unlike both mentioned earlier NetBeans editor and WindowBuilder it uses the lazy initialization pattern to separate initialization of components. Also it does not need to lock down parts of code that you can't edit; you may edit code by hand and VE is still able to work with your changes. The only disadvantage of VE is that it uses  is good option and it is free also. As others have mentioned my best experience with Java SWING applications is with NetBeans. NetBeans has a WYSIWYG editor and the code is automatically generated for you which is then protected however you can add custom code to add listeners and other events that the end user may be interested in using such as buttons text forms and areas and other nice GUI tools.
